:l ../Prelude.yl 
foldl `+ 0 [1 2 3]
!foldl `+ [1 2 3]
foldl `+ [1 2 3]
!m3
!m2
!m1
m1
:l ../examples.yl 
:l ../Prelude.yl 
m3
m2
!m1
:l ../examples.yl 
:l ../Prelude.yl 
m3
m2
!m1
m1
:l ../examples.yl 
!([1 5] >>= (\x -> return-list x))
![1 5] >>= (\x -> return-list x)
[1 5] >>= (\x -> return-list x)
[1 5] >>= (\x -> x)
[Just 5] >>= (\x -> x)
bind
:l ../Prelude.yl 
bind
:l ../examples.yl 
:l ../Prelude.yl 
:l ../Prelude.yl 
bind
:l ../examples.yl 
:l ../Prelude.yl 
bind
m2
m3
[Just 5] >>= (\x -> x)
bind
:l ../examples.yl 
:l ../Prelude.yl 
bind
[Just 5] >>= (\x -> x)
:l ../examples.yl 
:l ../Prelude.yl 
! l1
l1
:l ../examples.yl 
:l ../Prelude.yl 
!l1
:l ../examples.yl 
!l1
:l ../examples.yl 
!l1
l1
main "asd"
:l ../examples.yl 
! qsort [1 2 3 0]
qsort [1 2 3 0]
! qsort [1 2 3 0]
! qsort [1 2 3]
! [1 2 ]
:l ../Prelude.yl 
! [1 2 ]
:l ../Prelude.yl 
foldl `+ 0 [ 2 4 56]
product [1 2 4 6]
sum [ 1 2 34]
show $ qsort [ 1 3 5 0 4]
show $ qsort [ 1 3 5 0 4]
show $ qsort [ 1 3 5 0 4]
show $ qsort [ 1 3 5 0 4]
show $ qsort [ 1 3 5]
:l ../Prelude.yl 
:l ../Prelude.yl 
show $ qsort [ 1 3 5]
:l ../Prelude.yl 
