
ifte True  then _ = then;
ifte False _ else = else;

and True x = x;
and _ _ = False;

or False x = x;
or _ _ = True;

`&& = and;
`|| = or;

`$ f arg = f arg;

head [x & xs] = x;
tail [x & xs] = xs;

map f Nil = Nil;
map f [x & xs] = (f x) : (map f xs);


inc x = x + 1;
ones = 1 : ones;
naturals = 1 : map inc naturals;


fib 0 = 0;
fib 1 = 1;
fib n = (fib (n - 1)) + (fib (n - 2));

tst x = case x of
  1 -> 2;
  2 -> 5;
  [1 x] -> 42;
  x -> x + 1;;


`++ []       ys = ys;
`++ [x & xs] ys = x : xs ++ ys;

nth [x & xs] 0 = x;
nth [x & xs] n = nth xs (n - 1);

`! = nth;


rev [] a = a;
rev [x & xs] a = rev xs (x : a);
reverse list = rev list [];

show1 prefix Nil = prefix;
show1 prefix [a & as] = show1 (a : prefix) as;
show list = show1 Nil (reverse list);

testLetIn = let a = 1; b = 2 in a + b == 3;

testLetIn2 = let
    f x = x + 1
  in
    (f 41) == 42;

