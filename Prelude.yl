
fix f = f (fix f);

if True  then _ = then;
if False _ else = else;

and True x = x;
and _ _ = False;

or False x = x;
or _ _ = True;

`&& = and;
`|| = or;

not True = False;
not False = True;

`$ f arg = f arg;

`. f g x = f (g x);

head [x & xs] = x;
tail [x & xs] = xs;

map f [] = [];
map f [x & xs] = (f x) : (map f xs);

concat [] = [];
concat [x & xs] = x ++ (concat xs);

min [a] = a;
min [a b & rest] = min $ if (a < b) (a : rest) (b : rest);



foldl `@ ac xs = let
    go a [] = a;
    go a [x & xs] = go (a @ x) xs;
  in
    go ac xs;

foldr `@ ac = let
    go [] = ac;
    go [x & xs] = x @ go xs;
  in
    go;

sum = foldr `+ 0;
product = foldr `* 1;

inc x = x + 1;
ones = 1 : ones;
naturals = 1 : map inc naturals;


fib 0 = 0;
fib 1 = 1;
fib n = (fib (n - 1)) + (fib (n - 2));

`++ []       ys = ys;
`++ [x & xs] ys = x : xs ++ ys;

nth [x & xs] 0 = x;
nth [x & xs] n = nth xs (n - 1);

`!! = nth;

take 0 _  = [];
take _ [] = [];
take n [x & xs] =  x : take (n - 1) xs;

reverse list = let
    rev [] a = a;
    rev [x & xs] a = rev xs (x : a);
  in
    rev list [];

-- show1 prefix Nil = prefix;
-- show1 prefix [a & as] = show1 (a :! prefix) as;
-- show list = show1 Nil (reverse list);
show [] = [];
show [[x] & xs] = [(show x)] :! (show xs);
show [x & xs] = x :! (show xs);
show x = x;

``! = show;

testLetIn = let a = 1; b = 2 in a + b == 3;

testLetIn2 = let
    f x = x + 1
  in
    (f 41) == 42;

loop = loop + 1;

`>= x y = not (x < y);

filter p [] = [];
filter p [x & xs] = if (p x) (x : filter p xs) (filter p xs);

qsort [] = [];
qsort [x & xs] = qsort (filter (`>= x) xs) ++ [x] ++ qsort (filter (`< x) xs);


`>>= = bind;
bind [Just x] f = f x;
bind [Nothing] _ = [Nothing];
return-maybe x = ![Just x];

bind list f = concat $ map f list;
return-list a = [a];






